CS 111 Lab 1A


Robert Abbott 004432123
Mohammed Junaid Ahmed 104-293-008

Implementation Details:
The main method in our implementation is make_command_stream. This creates a linked list of command nodes. Each nodes is a complete command.

The complete command placed in each node is generated with a call to the makeCommandStreamUtil method. Breaks the command into tokens and fills the command_t structure recursively. The recursive structure of makeCommandStreamUtil enables parsing subcommands to be stored in the command array of its super command. 

Tokens are generated using ReadNextToken helper function which continues through the stream until it finds a delimiter such as ";", " ", "\n", "(" etc. ReadNextToken then returns both the token and the delimiters. 

Limitations:
The current implementation fails to raise errors for some of the ill-formed commands. To handle this a stack is implemented to track which commands occurred. By popping old commands when the next command in a sequence occurred and checking that closing commands occur (such as done, fi) the stack would ensure that ill-formed commands are detected. The stack code needs to be enchanced to handle the cases for example - if then a; fi. It fails to see that between if and then, there was no command.
